name: Scrape Marketplace
on:
  schedule:
    # At 3:30 PM Jakarta Time (08:45 UTC)
    # - cron: '30 6 * * *'
  workflow_dispatch:
#  // push:
#     branches: [ master ]
#   pull_request:
#     branches:
#   workflow_dispatch:
#     branches:

jobs:
  build:

    env:
      PY_COLORS: "1"
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        os: [ubuntu-22.04]
        python-version: ["3.13"]

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set Locale
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install tzdata locales -y && sudo locale-gen en_US.UTF-8
        sudo localectl set-locale LANG="en_US.UTF-8"
        export LANG="en_US.UTF-8"
        sudo update-locale
        locale -a
        locale
        locale -c -k LC_NUMERIC
        localectl status
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade pip
        pip install --upgrade wheel
        pip install -r requirements.txt
        pip install --upgrade pyautogui
    - name: Install extra dependencies
      if: runner.os == 'Linux'
      run: |
        pip install --upgrade python-xlib
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are flake8 issues
        flake8 . --count --show-source --statistics --exclude=temp
    - name: Install Chrome
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt install google-chrome-stable
    - name: Check the console scripts interface
      run: |
        seleniumbase
        sbase
    - name: Install chromedriver
      run: |
        seleniumbase install chromedriver
    - name: Make sure pytest is working
      run: |
        echo "def test_1(): pass" > nothing.py
        pytest nothing.py --uc
    - name: Check which Chrome binaries exist
      run: |
        python -c "import os; print(os.path.exists('/usr/bin/google-chrome'))"
        python -c "import os; print(os.path.exists('/bin/google-chrome-stable'))"
        python -c "import os; print(os.path.exists('/bin/chromium-browser'))"
        python -c "import os; print(os.path.exists('/bin/chromium'))"
    - name: Display Chrome binary that's used
      run: |
        python -c "from seleniumbase.core import detect_b_ver; print(detect_b_ver.get_binary_location('google-chrome'))"
        python -c "from seleniumbase import undetected; print(undetected.find_chrome_executable())"
    - name: Make sure pytest with sb is working
      run: |
        echo "def test_0(sb): pass" > verify_sb.py
        pytest verify_sb.py
    - name: Run python scrape_marketplace.py --debug
      env:
        PROXY_USER: ${{ secrets.PROXY_USER }}
        PROXY_PASSWORD: ${{ secrets.PROXY_PASSWORD }}
        PROXY_HOST: ${{ secrets.PROXY_HOST }}
        PROXY_PORT: ${{ secrets.PROXY_PORT }}
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        FB_USER: ${{ secrets.FB_USER }}
        FB_PASS: ${{ secrets.FB_PASS }}
        OTP_SECRET: ${{ secrets.OTP_SECRET }}
        SA_PRIVKEY_ID: ${{ secrets.SA_PRIVKEY_ID }}
        SA_PRIVKEY: ${{ secrets.SA_PRIVKEY }}
        SA_CLIENTMAIL: ${{ secrets.SA_CLIENTMAIL }}
        SA_CLIENT_X509_URL: ${{ secrets.SA_CLIENT_X509_URL }}
      run: |
        python scrape_marketplace.py --debug